// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/serf_p2p.proto

package serf_ipc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SerfDiscoveryService_GetMembers_FullMethodName         = "/serf_p2p.SerfDiscoveryService/GetMembers"
	SerfDiscoveryService_StreamMemberEvents_FullMethodName = "/serf_p2p.SerfDiscoveryService/StreamMemberEvents"
)

// SerfDiscoveryServiceClient is the client API for SerfDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SerfDiscoveryServiceClient interface {
	GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error)
	StreamMemberEvents(ctx context.Context, in *StreamMemberEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamMemberEventsResponse], error)
}

type serfDiscoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSerfDiscoveryServiceClient(cc grpc.ClientConnInterface) SerfDiscoveryServiceClient {
	return &serfDiscoveryServiceClient{cc}
}

func (c *serfDiscoveryServiceClient) GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMembersResponse)
	err := c.cc.Invoke(ctx, SerfDiscoveryService_GetMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serfDiscoveryServiceClient) StreamMemberEvents(ctx context.Context, in *StreamMemberEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamMemberEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SerfDiscoveryService_ServiceDesc.Streams[0], SerfDiscoveryService_StreamMemberEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamMemberEventsRequest, StreamMemberEventsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SerfDiscoveryService_StreamMemberEventsClient = grpc.ServerStreamingClient[StreamMemberEventsResponse]

// SerfDiscoveryServiceServer is the server API for SerfDiscoveryService service.
// All implementations must embed UnimplementedSerfDiscoveryServiceServer
// for forward compatibility.
type SerfDiscoveryServiceServer interface {
	GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error)
	StreamMemberEvents(*StreamMemberEventsRequest, grpc.ServerStreamingServer[StreamMemberEventsResponse]) error
	mustEmbedUnimplementedSerfDiscoveryServiceServer()
}

// UnimplementedSerfDiscoveryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSerfDiscoveryServiceServer struct{}

func (UnimplementedSerfDiscoveryServiceServer) GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembers not implemented")
}
func (UnimplementedSerfDiscoveryServiceServer) StreamMemberEvents(*StreamMemberEventsRequest, grpc.ServerStreamingServer[StreamMemberEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMemberEvents not implemented")
}
func (UnimplementedSerfDiscoveryServiceServer) mustEmbedUnimplementedSerfDiscoveryServiceServer() {}
func (UnimplementedSerfDiscoveryServiceServer) testEmbeddedByValue()                              {}

// UnsafeSerfDiscoveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SerfDiscoveryServiceServer will
// result in compilation errors.
type UnsafeSerfDiscoveryServiceServer interface {
	mustEmbedUnimplementedSerfDiscoveryServiceServer()
}

func RegisterSerfDiscoveryServiceServer(s grpc.ServiceRegistrar, srv SerfDiscoveryServiceServer) {
	// If the following call pancis, it indicates UnimplementedSerfDiscoveryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SerfDiscoveryService_ServiceDesc, srv)
}

func _SerfDiscoveryService_GetMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerfDiscoveryServiceServer).GetMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SerfDiscoveryService_GetMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerfDiscoveryServiceServer).GetMembers(ctx, req.(*GetMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SerfDiscoveryService_StreamMemberEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMemberEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SerfDiscoveryServiceServer).StreamMemberEvents(m, &grpc.GenericServerStream[StreamMemberEventsRequest, StreamMemberEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SerfDiscoveryService_StreamMemberEventsServer = grpc.ServerStreamingServer[StreamMemberEventsResponse]

// SerfDiscoveryService_ServiceDesc is the grpc.ServiceDesc for SerfDiscoveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SerfDiscoveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "serf_p2p.SerfDiscoveryService",
	HandlerType: (*SerfDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMembers",
			Handler:    _SerfDiscoveryService_GetMembers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMemberEvents",
			Handler:       _SerfDiscoveryService_StreamMemberEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/serf_p2p.proto",
}
